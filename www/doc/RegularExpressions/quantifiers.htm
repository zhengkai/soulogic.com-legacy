<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=UTF-8">
<TITLE>限定符 - 正则表达式</TITLE>
<!--CSS_START-->
<SCRIPT SRC="vs70.js"></SCRIPT>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-98185-1";
urchinTracker();
</script>

<LINK REL="stylesheet" HREF="vs70_5.css">
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript&nbsp;和&nbsp;VBScript&nbsp;正则表达式</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="reconquantifiers"></A>限定符</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>有时候不知道要匹配多少字符。为了能适应这种不确定性，正则表达式支持限定符的概念。这些限定符可以指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。</P>

<P>下表给出了各种限定符及其含义的说明：</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=16%>字符</TH>
<TH width=84%>描述</TH>
</TR>

<TR VALIGN="top">
<TD width=16%>* </TD>
<TD width=84%>匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>+ </TD>
<TD width=84%>匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>? </TD>
<TD width=84%>匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>{<I>n</I>}</TD>
<TD width=84%><I>n</I> 是一个非负整数。匹配确定的 <I>n</I> 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>{<I>n</I>,} </TD>
<TD width=84%><I>n</I> 是一个非负整数。至少匹配<I>n</I> 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>{<I>n</I>,<I>m</I>} </TD>
<TD width=84%><I>m</I> 和 <I>n</I> 均为非负整数，其中<I>n</I> &lt;= <I>m</I>。最少匹配 <I>n</I> 次且最多匹配 <I>m</I> 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</TD>
</TR>
</table></div>

<P>对一个很大的输入文档而言，章节数很轻易就超过九章，因此需要有一种方法来处理两位数或者三位数的章节号。限定符就提供了这个功能。下面的JScript 正则表达式可以匹配具有任何位数的章节标题：</P>

<PRE class="code">/Chapter [1-9][0-9]*/</PRE>

<P>下面的 VBScript 正则表达式执行同样的匹配：</P>

<PRE class="code">"Chapter [1-9][0-9]*"</PRE>

<P>请注意限定符出现在范围表达式之后。因此，它将应用于所包含的整个范围表达式，在本例中，只指定了从 0 到 9 的数字。</P>

<P>这里没有使用 '+' 限定符，因为第二位或后续位置上并不一定需要一个数字。同样也没有使用 '?' 字符，因为这将把章节数限制为只有两位数字。在 'Chapter' 和空格字符之后至少要匹配一个数字。</P>

<P>如果已知章节数限制只有99 章，则可以使用下面的 JScript 表达式来指定至少有一位数字，但不超过两个数字。</P>

<PRE class="code">/Chapter [0-9]{1,2}/</PRE>

<P>对 VBScript 可以使用下述正则表达式：</P>

<PRE class="code">"Chapter [0-9]{1,2}"</PRE>

<P>上述表达式的缺点是如果有一个章节号大于 99，它仍只会匹配前两位数字。另一个缺点是某些人可以创建一个 Chapter 0，而且仍能匹配。一个更好的用来匹配两位数的 JScript 表达式如下：</P>

<PRE class="code">/Chapter [1-9][0-9]?/</PRE>

<P>或者</P>

<PRE class="code">/Chapter [1-9][0-9]{0,1}/</PRE>

<P>对 VBScript 而言，下述表达式与上面等价：</P>

<PRE class="code">"Chapter [1-9][0-9]?"</PRE>

<P>或者</P>

<PRE class="code">"Chapter [1-9][0-9]{0,1}"</PRE>

<P>'*'、'+' 和 '?' 限定符都称之为<I>贪婪的</I>，也就是说，他们尽可能多地匹配文字。有时这根本就不是所希望发生的情况。有时则正好希望最小匹配。</P>

<P>例如，你可能要搜索一个 HTML 文档来查找一处包含在 H1 标记中的章节标题。在文档中该文字可能具有如下形式：</P>

<PRE class="code">&lt;H1&gt;Chapter 1 &#0150; Introduction to Regular Expressions&lt;/H1&gt;</PRE>

<P>下面的表达式匹配从开始的小于号 (&lt;) 到 H1 标记结束处的大于号之间的所有内容。</P>

<PRE class="code">/&lt;.*&gt;/</PRE>

<P>VBScript 的正则表达式为：</P>

<PRE class="code">"&lt;.*&gt;"</PRE>

<P>如果所要匹配的就是开始的 H1 标记，则下述非贪婪地表达式就只匹配 &lt;H1&gt;。</P>

<PRE class="code">/&lt;.*?&gt;/</PRE>

<P>或者</P>

<PRE class="code">"&lt;.*?&gt;"</PRE>

<P>通过在 '*'、 '+' 或 '?' 限定符后放置 '?'，该表达式就从贪婪匹配转为了非贪婪或最小匹配。</P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>